{"ast":null,"code":"import { takeLatest, put, all, call, take } from 'redux-saga/effects';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); //signInWithPopup comes from firebase.utils\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // there is no user then return null\n\n    yield getSnapshotFromUserAuth(userAuth); // threre were a user the get the snapshot from the user and show that to user auth\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //for the new declare variable ^|^\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} //for the signOut ^|^|^\n\nexport function* signUp(_ref2) {\n  let {\n    payload: {\n      email,\n      password,\n      displayName\n    }\n  } = _ref2;\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSihnUp(_ref3) {\n  let {\n    payload: user,\n    additionalData\n  } = _ref3;\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onGoogleSignInStrat() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated); //new method for this we have to create new generator function)\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSihnUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStrat), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart)]);\n} // add into the user saga and call the different variable for listing that action to work","map":{"version":3,"sources":["/Users/studiomac-152/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","take","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSihnUp","onGoogleSignInStrat","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignUpStart","SIGN_UP_START","onSignOutStart","SIGN_OUT_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,aAAvE,EAAsFC,aAAtF,QAA2G,gBAA3G;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,cAA5C,EAA4D;AAC/D,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMhB,IAAI,CAACW,yBAAD,EAA4BG,QAA5B,EAAsCC,cAAtC,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMpB,GAAG,CAACI,aAAa,CAAC;AAAEiB,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACK,aAAa,CAACkB,KAAD,CAAd,CAAT;AACH;AACJ;AAGD,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAvB,CADA,CAC6D;;AAC7D,UAAMG,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACK,aAAa,CAACkB,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,eAAV,OAA4D;AAAA,MAAlC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAX,GAAkC;;AAC/D,MAAI;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMZ,OAAO,GAAG,MAAMhB,IAAI,CAACW,yBAAD,EAA4BY,IAA5B,CAA1B;AACA,UAAMN,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMpB,GAAG,CACLI,aAAa,CAAC;AAAEiB,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADR,CAAT;AAEH,GAND,CAME,OAAOC,KAAP,EAAc;AACZvB,IAAAA,GAAG,CAACK,aAAa,CAACkB,KAAD,CAAd,CAAH;AACH;AACJ;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACnC,MAAI;AACA,UAAMhB,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAI,CAACE,QAAL,EAAe,OAFf,CAEuB;;AACvB,UAAMD,uBAAuB,CAACC,QAAD,CAA7B,CAHA,CAGyC;AAC5C,GAJD,CAIE,OAAOO,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACK,aAAa,CAACkB,KAAD,CAAd,CAAT;AACH;AACJ,C,CAED;;AAEA,OAAO,UAAUU,OAAV,GAAoB;AACvB,MAAI;AACA,UAAMtB,IAAI,CAACsB,OAAL,EAAN;AACA,UAAMjC,GAAG,CAACM,cAAc,EAAf,CAAT;AACH,GAHD,CAGE,OAAOiB,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACO,cAAc,CAACgB,KAAD,CAAf,CAAT;AACH;AACJ,C,CAED;;AAEA,OAAO,UAAUW,MAAV,QAAgE;AAAA,MAA/C;AAAEN,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBK,MAAAA;AAAnB;AAAX,GAA+C;;AACnE,MAAI;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACyB,8BAAL,CAAoCP,KAApC,EAA2CC,QAA3C,CAAvB;AACA,UAAM9B,GAAG,CAACQ,aAAa,CAAC;AAACiB,MAAAA,IAAD;AAAMR,MAAAA,cAAc,EAAE;AAACkB,QAAAA;AAAD;AAAtB,KAAD,CAAd,CAAT;AACH,GAHD,CAGE,OAAOZ,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACS,aAAa,CAACc,KAAD,CAAd,CAAT;AACH;AAGJ;AAED,OAAO,UAAUc,iBAAV,QAA2D;AAAA,MAA/B;AAACT,IAAAA,OAAO,EAACH,IAAT;AAAeR,IAAAA;AAAf,GAA+B;AAC9D,QAAMF,uBAAuB,CAACU,IAAD,EAAOR,cAAP,CAA7B;AACH;AAED,OAAO,UAAUqB,mBAAV,GAAgC;AACnC,QAAMvC,UAAU,CAACW,eAAe,CAAC6B,oBAAjB,EAAuCf,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUgB,kBAAV,GAA+B;AAClC,QAAMzC,UAAU,CAACW,eAAe,CAAC+B,mBAAjB,EAAsCd,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUe,kBAAV,GAA+B;AAClC,QAAM3C,UAAU,CAACW,eAAe,CAACiC,kBAAjB,EAAqCX,mBAArC,CAAhB,CADkC,CACwC;AAC7E;AAED,OAAO,UAAUY,aAAV,GAA0B;AAC7B,QAAM7C,UAAU,CAACW,eAAe,CAACmC,aAAjB,EAAgCX,MAAhC,CAAhB;AACH;AAED,OAAO,UAAUY,cAAV,GAA2B;AAC9B,QAAM/C,UAAU,CAACW,eAAe,CAACqC,cAAjB,EAAiCd,OAAjC,CAAhB;AACH;AAED,OAAO,UAAUe,eAAV,GAA2B;AAC9B,QAAMjD,UAAU,CAACW,eAAe,CAACuC,eAAjB,EAAkCZ,iBAAlC,CAAhB;AACH;AAED,OAAO,UAAUa,SAAV,GAAsB;AACzB,QAAMjD,GAAG,CAAC,CAACC,IAAI,CAACoC,mBAAD,CAAL,EACVpC,IAAI,CAACsC,kBAAD,CADM,EAEVtC,IAAI,CAAC8B,mBAAD,CAFM,EAGV9B,IAAI,CAAC4C,cAAD,CAHM,CAAD,CAAT;AAIH,C,CAED","sourcesContent":["import { takeLatest, put, all, call, take } from 'redux-saga/effects';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider); //signInWithPopup comes from firebase.utils\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(\n            signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch (error) {\n        put(signInFailure(error))\n    }\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser()\n        if (!userAuth) return; // there is no user then return null\n        yield getSnapshotFromUserAuth(userAuth); // threre were a user the get the snapshot from the user and show that to user auth\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n}\n\n//for the new declare variable ^|^\n\nexport function* signOut() {\n    try {\n        yield auth.signOut()\n        yield put(signOutSuccess())\n    } catch (error) {\n        yield put(signOutFailure(error))\n    }\n}\n\n//for the signOut ^|^|^\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield put(signUpSuccess({user,additionalData: {displayName}}));\n    } catch (error) {\n        yield put(signUpFailure(error))\n    }\n\n\n}\n\nexport function* signInAfterSihnUp({payload:user, additionalData}){\n    yield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* onGoogleSignInStrat() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);//new method for this we have to create new generator function)\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* onSignUpSuccess(){\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSihnUp)\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStrat),\n    call(onEmailSignInStart),\n    call(isUserAuthenticated),\n    call(onSignOutStart)]);\n}\n\n// add into the user saga and call the different variable for listing that action to work"]},"metadata":{},"sourceType":"module"}