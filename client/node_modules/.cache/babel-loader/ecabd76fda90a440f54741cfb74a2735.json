{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); //signInWithPopup comes from firebase.utils\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStrat() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStrat), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/studiomac-152/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","signInSuccess","signInFailure","UserActionTypes","auth","googleProvider","createUserProfileDocument","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStrat","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAG;AACH,UAAMC,OAAO,GAAG,MAAMT,IAAI,CAACM,yBAAD,EAA4BE,QAA5B,CAA1B;AACI,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CAACG,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAMC,KAAN,EAAY;AACV,UAAMhB,GAAG,CAACI,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AAGD,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMZ,IAAI,CAACa,eAAL,CAAqBZ,cAArB,CAArB,CADD,CAC4D;;AAC3D,UAAME,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAMF,KAAN,EAAY;AACV,UAAMhB,GAAG,CAACI,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,eAAV,OAAuD;AAAA,MAA7B;AAACC,IAAAA,OAAO,EAAE;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAAV,GAA6B;;AAC1D,MAAI;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMZ,IAAI,CAACkB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMZ,OAAO,GAAG,MAAMT,IAAI,CAACM,yBAAD,EAA4BU,IAA5B,CAA1B;AACA,UAAMN,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CACLG,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADR,CAAT;AAEH,GAND,CAME,OAAOC,KAAP,EAAa;AACXhB,IAAAA,GAAG,CAACI,aAAa,CAACY,KAAD,CAAd,CAAH;AACH;AACJ;AAED,OAAO,UAAUS,mBAAV,GAA+B;AAClC,QAAM1B,UAAU,CAACM,eAAe,CAACqB,oBAAjB,EAAsCT,gBAAtC,CAAhB;AACH;AAED,OAAO,UAAUU,kBAAV,GAA8B;AACjC,QAAM5B,UAAU,CAACM,eAAe,CAACuB,mBAAjB,EAAqCR,eAArC,CAAhB;AACH;AAED,OAAO,UAAUS,SAAV,GAAqB;AACxB,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAACuB,mBAAD,CAAL,EAA4BvB,IAAI,CAACyB,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest, put, all, call } from 'redux-saga/effects';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth){\n    try{\n    const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\n\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider); //signInWithPopup comes from firebase.utils\n        yield getSnapshotFromUserAuth(user);\n    } catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithEmail({payload: {email, password}}){\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(\n            signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch (error){\n        put(signInFailure(error))\n    }\n}\n\nexport function* onGoogleSignInStrat(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\n\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStrat), call(onEmailSignInStart)]);\n} "]},"metadata":{},"sourceType":"module"}